//
// MVC APPROACH
//

// Clearfix
@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// map deep get
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
      $map: map-get($map, $key);
  }
  @return $map;
}

// Color tints

@function tint($color, $percentage) {
  @return mix($color-white, $color, $percentage);
}

// Box Sizing
@mixin box-sizing($box-model) {
    -webkit-box-sizing: $box-model; // Safari <= 5
       -moz-box-sizing: $box-model; // Firefox <= 19
            box-sizing: $box-model;
}

// Border Radius
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// Center-align a block level element
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Text Overflow
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// // Function for converting a px based font-size to rem.
@function rem-calc($size) {
    $remSize: $size / 16;
    @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin font-size($size) {
    font-size: $size;
    font-size: rem-calc($size);
}

// Focus
// @mixin focus {  
//   outline: 4px solid $focus-color;
//   box-shadow:$focus-shadow;
//   background-color:$color-white;
// }

// Component mixins
@mixin focus {
  // border-radius:3px;
	// $focus-color:$color-primary-300;
	// $focus-shadow:0 0 2px 1px rgba(0, 0, 0, .25);
	// outline: 1px solid $focus-color;
	// box-shadow:$focus-shadow;
	// background-color:$color-white;
}

// Line height
@mixin line-height($heightValue: 12 ){
    line-height: $heightValue + px; //fallback for old browsers
    line-height: (0.125 * $heightValue) + rem;
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

// Transition
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}


// Transition Delay
@mixin transition-delay($args...) {
    -webkit-transition-delay: $args;
    -moz-transition-delay: $args;
    -ms-transition-delay: $args;
    -o-transition-delay: $args;
    transition-delay: $args;
  }

// Transform
@mixin transform($args...) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
  }

// Transition property
@mixin transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}

// Transition duration
@mixin transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
}

// Vendor prefix
@mixin vendor-prefix($name, $argument... ) {
    -webkit-#{$name}: #{$argument};
    -ms-#{$name}: #{$argument};
    -moz-#{$name}: #{$argument};
    -o-#{$name}: #{$argument};
    #{$name}: #{$argument};
}

// Rotate
@mixin rotate($degrees) {
    -webkit-transform: rotate($degrees);
    -moz-transform: rotate($degrees);
    -ms-transform: rotate($degrees);
    -o-transform: rotate($degrees);
    transform: rotate($degrees);
}
// Vertical Align
@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

// Un-Vertical Align
@mixin un-vertical-align {
    position: relative;
    top: inherit;
    -webkit-transform: inherit;
    -ms-transform: inherit;
    transform: inherit;
}

// Columns
@mixin column-count($value) {
	-moz-column-count: $value;
	-webkit-column-count: $value;
    -moz-columns: $value;
    column-count: $value;
}

@mixin column-fill($value) {
	-moz-column-fill: $value;
	-webkit-column-fill: $value;
	column-fill: $value;
}

@mixin column-gap($value) {
	-moz-column-gap: $value;
	-webkit-column-gap: $value;
	column-gap: $value;
}

@mixin column-rule($value) {
	-moz-column-rule: $value;
	-webkit-column-rule: $value;
	column-rule: $value;
}

@mixin column-span($value) {
	-moz-column-span: $value;
	-webkit-column-span: $value;
	column-span: $value;
}

@mixin column-width($value) {
	-moz-column-width: $value;
	-webkit-column-width: $value;
	column-width: $value;
}

@mixin columns($value) {
	-moz-columns: $value;
	-webkit-columns: $value;
	columns: $value;
}

@mixin column-overflow($value) {
	-moz-column-overflow: $value;
	-webkit-column-overflow: $value;
	column-overflow: $value;
}

@mixin break-before($value) {
    -moz-break-before: $value;
	-webkit-column-break-before: $value;
	break-before: $value;
}

@mixin break-after($value) {
	-moz-break-after: $value;
	-webkit-column-break-after: $value;
	break-after: $value;
}

@mixin break-inside($value) {
    -o-column-break-inside: $value;
    -ms-column-break-inside: $value;
	-moz-break-inside: $value;
	-webkit-column-break-inside: $value;
    break-inside: $value;
    column-break-inside: $value;
    page-break-inside: $value;
}

////////////////////////////////////////////////////////
// Form mixins
////////////////////////////////////////////////////////

@mixin l-form-list($style: default) {
	padding:0;
  margin-bottom:0;
  margin-top:$space-xxs;
	li {
		padding:0;
    margin-top:$space-xxxs;
		list-style-type: none;
		display: inline-block;    
	}
	input {
		vertical-align: top;		
		margin-right:.45rem;
		margin-top:4.25px;
	}
	label {
		vertical-align: top;
		margin-left:.15rem;
		color:$color-text;
	}
	@if $style == 'vertical' {
    padding:0;
    margin-bottom:0;
    li {
      padding:0;
      list-style-type: none;
      display: block;
    }
    input {
      vertical-align: top;		
      margin-right:.45rem;
      margin-top:4.25px;
    }
    label {
      vertical-align: top;
      margin-left:.15rem;
      color:$color-text;
			width:75%;
		}
	} @else if $style == 'columns' {
		// $u-column-unit:18rem;
		// -moz-column-width:$u-column-unit;
		// -webkit-column-width:$u-column-unit;
		// column-width:$u-column-unit;
    @include mq('tablet') {
      $u-columns:3;
      -moz-columns:$u-columns;
      -webkit-columns:$u-columns;
      columns:$u-columns;
      padding:0;
    }
    $u-columns:2;
		-moz-columns:$u-columns;
		-webkit-columns:$u-columns;
		columns:$u-columns;
    padding:0;
    li {
      padding:0;
      list-style-type: none;
      display: inline-block;
      width:100%;
    }
    input {
      vertical-align: top;		
      margin-right:.45rem;
      margin-top:4.25px;
    }
    label {
      vertical-align: top;
      margin-left:.15rem;
      color:$color-text;
    }
	}
}

@mixin form-field {
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
	display: block;
	height: 2.5rem;
	width: 100%;
	padding: 0.5rem;
	border: 1px solid #cacaca;
	border-radius: 0;
	font-family: inherit;
	color: $color-text;
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}

@mixin placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@mixin selection {
    ::selection { @content; }
    ::-moz-selection { @content; }
}

// ---- Design Workshop

// angled background
@mixin sectionAngleFull {
  padding-top:3em;
  padding-bottom:3em;
  position: relative;
  &:after {
    background: #f2f2f2;
    content: '';
    display: block;
    height: 100%;
    left: 0;
    right: 0;
    bottom: 0;
    position: absolute;
    transform: skewY(-4.5deg);
    transform-origin: 100%;
    z-index: -1;
  }
}
@mixin sectionAngleBottom {
  position: relative;
  background-color: #004077;
  &:before {
    background: #00A8C8;
    content: '';
    display: block;
    height: 100%;
    left: 0;
    right: 0;
    bottom: -100px;
    position: absolute;
    transform: skewY(4.5deg);
    transform-origin: 100%;
    z-index: -1;
  }
  &:after {
    background: inherit;
    content: '';
    display: block;
    height: 100%;
    left: 0;
    right: 0;
    bottom: 0;
    position: absolute;
    transform: skewY(-4.5deg);
    transform-origin: 100%;
    z-index: -1;
  }
}

///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///

@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
    $responsive-unitless: $responsive / ($responsive - $responsive + 1);
    $dimension: if(unit($responsive) == 'vh', 'height', 'width');
    $min-breakpoint: $min / $responsive-unitless * 100;

    @media (max-#{$dimension}: #{$min-breakpoint}) {
      font-size: $min;
    }

    @if $max {
      $max-breakpoint: $max / $responsive-unitless * 100;

      @media (min-#{$dimension}: #{$max-breakpoint}) {
        font-size: $max;
      }
    }

    @if $fallback {
      font-size: $fallback;
    }

    font-size: $responsive;
}


// Font unit conversion mixin
// ----
// Sass (v3.4.12)
// Compass (v1.0.3)
// ----

$baseSize: 14px;
$convertBase: $baseSize;

// html {
//   font-size: percentage($baseSize / 16px);
// }

@function convert($value, $convertUnit, $convertBase: $convertBase) {
  $currentUnit: unit($value);
  $strippedValue: $value / ($value * 0 + 1);
  @if not unitless($convertBase) {
    @if unit($convertBase) != px {
      @error "Not supported unit '#{unit($convertBase)}' as convert base!";
    }
    $convertBase: $convertBase / ($convertBase * 0 + 1);
  }

  @if $currentUnit == px {
    @if $convertUnit == 'em' {
      @return 0em + ($strippedValue / $convertBase);
    }
    @else if $convertUnit == '%' {
      @return percentage($strippedValue / $convertBase);
    }
  }
  @else if $currentUnit == em {
    @if $convertUnit == 'px' {
      @return 0px + ($strippedValue * $convertBase);
    }
    @else if $convertUnit == '%' {
       @return percentage($strippedValue);
    }
  }
  @else if $currentUnit == '%' {
    @if $convertUnit == 'px' {
      @return 0em + ($strippedValue * $convertBase / 100);
    }
    @else if $convertUnit == 'em' {
      @return 0em + ($strippedValue / 100);
    }
  }
  // TODO: Check for pt unit convert
  @else if $currentUnit == pt {
    @if $convertUnit == 'px' {
      @return 0px + ($strippedValue * 1.3333);
    }
    @else if $convertUnit == 'em' {
      @return 0em + ($strippedValue / 12);
    }
    @else if $convertUnit == '%' {
        @return percentage($strippedValue / 12)
    }
  }
  @error "Can't convert '#{$value}' to unit '#{$convertUnit}'!";
}

// .example1 {
//   font-size: convert(18px, '%'); /* converted from pixels */
// }

// .example2 {
//   font-size: convert(13pt, 'em'); /* converted from points */
// }

// .example3 {
//   font-size: convert(2.5em, 'px'); /* converted from ems */
// }

// .example4 {
//   font-size: convert(234%, 'px'); /* converted from percentage */
// }

@mixin rgba-background($hexcolor, $opacity) {
  background-color: $hexcolor;
  background-color: rgba($hexcolor, $opacity);
}

@mixin rgba-color($hexcolor, $opacity) {
  color: $hexcolor;
  color: rgba($hexcolor, $opacity);
}

// Component Table
@mixin table {
  background: $table-bg;
  margin-bottom: $table-margin-bottom;
  border: $table-border;
  width: $table-width;
  border-collapse: collapse;

  thead {
    background: $table-head-bg;
    tr {
      th,
      td {
        padding: $table-head-padding;
        font-size: $table-head-font-size;
        font-weight: $table-head-font-weight;
        color: $table-head-font-color;
        border: $table-head-border;
        text-transform: $table-head-text-transform;
      }
    }
  }
  tbody {
    tr {
      th,
      td {
        padding: $table-row-padding;
        font-size: $table-row-font-size;
        color: $table-row-font-color;
        border: $table-body-border;
      }
      &:nth-of-type(even) { background: $table-even-row-bg; }
    }
  }  
  tr td {
    display: $table-display;
    line-height: $table-line-height;    
  }
}
@mixin ds-font-line-height($size) {
  @if $size == 'xs' {

    font-size:$body-size-xs;
    line-height:1;

  } @else if $size == 's' {

    font-size:$body-size-s;
    line-height:1;

  } @else if $size == 'm' {

    font-size:$body-size-m;
    line-height:1.5;

  } @else if $size == 'l' {

    font-size:$body-size-l;
    line-height:1.5;

  } @else if $size == 'xl' {

    font-size:$body-size-xl;
    line-height:1.5;

  } @else if $size == 'xxl' {

    font-size:$body-size-xxl;
    line-height:1.45;

  } @else {

    font-size:$size;
    line-height:1;

  }  
}

// Display and Layout Utilities
// mixins
// .padding-top-l {
//     padding-top: $space-l;
// }
@mixin show-outlines {
  border:1px solid red;
  * {border:1px solid red;}
}


// https://ryanfeigenbaum.com/easy-responsive-typography/

/* Define the mixin */
@mixin fluid-typography($minFont,$maxFont,$minBreakpoint,$maxBreakpoint) {
  
  /* Define variable for media query */
  $maxLessOne: $maxBreakpoint - 1;
  
  /* Define variable for fallback */
  $avg: ($maxFont + $minFont) / 2;
 
  /* Base font size */
  font-size: #{$minFont}px;
  
  @media (min-width: #{$minBreakpoint}px) and (max-width: #{$maxLessOne}px) {
    
    /* Adds a fallback for unsupported browsers */
    font-size: #{$avg}px;
      
    /* The fluid typography magic 🌟  */
    font-size: calc(#{$minFont}px + (#{$maxFont} - #{$minFont}) * (100vw - #{$minBreakpoint}px) / (#{$maxBreakpoint} - #{$minBreakpoint}))
  }
  
  @media (min-width: #{$maxBreakpoint}px) {
    font-size: #{$maxFont}px;
  }
}

// @include fluid-typography(16,25,300,1500);

// utilities

@mixin layout-space($type, $val) {
  @if $type == "margin" {
      margin:$val;
  } @else if $type == "margin x" {
      margin-left:$val;
      margin-right:$val;
  } @else if $type == "margin y" {
      margin-top:$val;
      margin-bottom:$val;
  } @else if $type == "margin top" {
      margin-top:$val;
  } @else if $type == "margin bottom" {
      margin-bottom:$val;
  } @else if $type == "margin left" {
      margin-left:$val;
  } @else if $type == "margin right" {
      margin-right:$val;
  } @else if $type == "padding" {
      padding:$val;
  } @else if $type == "padding x" {
      padding-left:$val;
      padding-right:$val;
  } @else if $type == "padding y" {
      padding-top:$val;
      padding-bottom:$val;
  } @else if $type == "padding top" {
      padding-top:$val;
  } @else if $type == "padding bottom" {
      padding-bottom:$val;
  } @else if $type == "padding left" {
      padding-left:$val;
  } @else if $type == "padding right" {
      padding-right:$val;
  }    
}

// panel draft
@mixin l-panel($backgroundColor, $ySpace, $xSpace) {
  border-radius: $border-radius-s;
  background-color: $backgroundColor;
  padding: $ySpace $xSpace;
}

@mixin hide-element() {
    /* Remove the item from normal flow */
    position: absolute;

    /* Workaround for falsely pronounced, smushed text */
    white-space: nowrap;

    /* Set it to the smallest possible size (some screen readers ignore elements with zero height and width) */
    width: 1px;
    height: 1px;

    /* Hide overflowing content after resizing */
    overflow: hidden;

    /* Reset any property that may change the elements size */
    border: 0;
    padding: 0;

    /* Clipping defines what part of an element should be displayed. */
    /* Deprecated clip property for older browsers */
    clip: rect(0 0 0 0);

    /* clip-path for newer browsers. inset(50%) defines an inset rectangle that makes the content disappear.  */
    clip-path: inset(50%); 

    /* It seems like at the moment nobody is quite sure why margin: -1px is there. On top of that it seems to cause issues (see: https://github.com/h5bp/html5-boilerplate/issues/1985). */
    margin: -1px;

    display:none;
  }